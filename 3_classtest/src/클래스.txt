1. 자료형
2. 변수
3. 연산자
4. 제어문(조건,반복)

** 객체(Object)
class : class는 객체를 생성하기 위한 틀.

ex)
class	   +	객체
붕어빵틀   +	밀가루
		팔
		초코
		딸기
		기타등등..


			Object(객체) : 자동차(Car)

속성(field) ::특징 지을 수 있는 것	기능(method)
일반적으로 변수로 만듦
--------------------------------------------------------------------
ex)
차이름(carName)				가속(speedUp)
색상(color)				감속(speedDown)
제조사(maker)				정지(stop)
속도(speed)

**method: 함수, 기능, 행동
형식)
1.접근제어자 2.ReturnType 3.methodName([args]) {
		실행문;
		실행문;
		실행문;
		실행문;
	return 값(실행문을 모두 실행한 결과값);
}

Returntype = 실행 결과의 data type
		return할 값이 없을 경우 void를 사용한다.

** class
1.접근제어자 [] 2.class 3.ClassName []{

}
접근제어자에는 default,public만 사용가능
		private,protected 불가능

속성

------------------------------------------
메소드

** Class의 사용.(참조형(reference) Data Type)
1. 선언 
  형식)
  접근제어자	ClassName(데이터타입)	객체명(변수명);
  예)
  public String carName;
  private Car car;
  GBB gbb;

2. 생성 :메모리 영역에 올리는 작업
  형식)
  객체명 = new ClassName();
  예)
  carName = new String"쏘나타";
  car = new Car();
  gbb = new GBB();

  >>>>>>>>>>>>1 , 2 동시에.
  접근제어자 ClassName 객체명 = new ClassName();
  public String carName = new ClassName();
  private Car car = new Car();
  GBB gbb = new GBB();


3. 사용 :
  형식)
  객체명, 변수;//get     
  객체명, 변수 = 값;//set
  객체명.method(); 메소드를 호출시
  예)
  int len = carName.length();
  car.speed = 100;
  System.out.println(car.speed);//100
  gbb.game();


** 생성자 (Constructor)
1. 객체 생성시 최초로 호출되는 영역. 단, new 연산자와 함께 호출.
2. 객체 생성시 객체의 초기화 작업을 생성자 안에서 함.
3. 사용자 정의 생성자가 없을 경우 default 생성자가 생략되어 있다.
	D C : public ClassName() {}
	사용자 정의 생성자를 하나 이상만들경우 default 생성자는 사라진다.
4. Class 의 이름과 같은 메소드의 반응
   return 타입이 없다.

   형식)
   접근제어자(ClassName)
5. method overloading(다중정의::말그대로 여러개 만든다.)
   같은 이름의 메소드를 여러개 정의 하는 것.
   단, 인자값의 갯수가 다르거나
   		타입이 달라야한다.
   예)
   public void a(){}
   public void a(){}			//불가능
   public void a(int x){}		//가능
   public void a(int y){}		//불가능
   public int a(){}			//불가능
   public void a(int x, String s){}	//가능
   public void a(int x, int y){}	//가능
   public void a(String s, int y){}	//가능

   System.out.print 의 .은 안에 가지고 있다는 뜻
   publinc class System {
	PrintStream err;
	PrintStream out;
	InputStream in;
 }
 5. this : 자기 클래스 참조변수
    super : 상위 클래스 참조변수

 6.    this() : 자기 클래스 생성자 호출
       super() : 상위 클래스의 생성자 호출

** 클래스를 만들고 실행할떄 JVM(자바버추얼머신)이 있어야함.
자바의 특징 : 플랫폼독립이다.
JVM 은 크게 3개의 영역을 나눔

static 3.

heap   1.동적메모리에 할당됨 객체생성

stack  2.변수명, 메소드의 할당